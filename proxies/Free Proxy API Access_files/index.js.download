'use strict';

function SelectColumnFilter({
    column: { filterValue, setFilter, preFilteredRows, id },
}) {
    // Calculate the options for filtering
    // using the preFilteredRows
    const options = React.useMemo(() => {
        const options = new Set()
        preFilteredRows.forEach(row => {
            options.add(row.values[id])
        })
        return [...options.values()]
    }, [id, preFilteredRows])

    // Render a multi-select box
    return (
        <select
            value={filterValue}
            onChange={e => {
                setFilter(e.target.value || undefined)
            }}
        >
            <option value="">All</option>
            {options.map((option, i) => (
                <option key={i} value={option}>
                    {option}
                </option>
            ))}
        </select>
    )
}

function ProxyTable(props) {
    const filterTypes = React.useMemo(
        () => ({
            // Add a new fuzzyTextFilterFn filter type.
            // fuzzyText: fuzzyTextFilterFn,
            // Or, override the default text filter to use
            // "startWith"
            text: (rows, id, filterValue) => {
                return rows.filter(row => {
                    const rowValue = row.values[id]
                    return rowValue !== undefined
                        ? String(rowValue)
                            .toLowerCase()
                            .startsWith(String(filterValue).toLowerCase())
                        : true
                })
            },
        }),
        []
    )

    const defaultColumn = React.useMemo(
        () => ({
            // Let's set up our default Filter UI
            Filter: SelectColumnFilter,
        }),
        []
    )

    const data = React.useMemo(() => props.apiData)

    const columns = React.useMemo(
        () => [
            {
                Header: 'IP',
                accessor: 'ip', // accessor is the "key" in the data
            },
            {
                Header: 'PORT',
                accessor: 'port',
                Filter: SelectColumnFilter,
                filter: 'includes',
            },
            {
                Header: 'TYPE',
                accessor: 'type',
                Filter: SelectColumnFilter,
                filter: 'includes',
            },
            {
                Header: 'COUNTRY',
                accessor: 'country',
                Filter: SelectColumnFilter,
                filter: 'includes',
            },
            {
                Header: 'CITY',
                accessor: 'city',
                Filter: SelectColumnFilter,
                filter: 'includes',
            },
            {
                Header: 'CONTINENT',
                accessor: 'continent',
                Filter: SelectColumnFilter,
                filter: 'includes',
            },
            {
                Header: 'ISO CODE',
                accessor: 'isocode',
                Filter: SelectColumnFilter,
                filter: 'includes',
            },
            {
                Header: 'REGION',
                accessor: 'region',
                Filter: SelectColumnFilter,
                filter: 'includes',
            },
            {
                Header: 'REGION CODE',
                accessor: 'regioncode',
                Filter: SelectColumnFilter,
                filter: 'includes',
            },
            {
                Header: 'LATITUDE',
                accessor: 'latitude'
            },
            {
                Header: 'LONGITUDE',
                accessor: 'longitude'
            },
            {
                Header: 'RISK',
                accessor: 'risk',
                Filter: SelectColumnFilter,
                filter: 'includes',
            },
            {
                Header: 'PREFERRED PORT',
                accessor: 'portPreferred',
                Filter: SelectColumnFilter,
                filter: 'includes',
            },
            {
                Header: 'PROVIDER',
                accessor: 'provider',
                Filter: SelectColumnFilter,
                filter: 'includes',
            }
        ],
        []
    )

    const {
        getTableProps,
        getTableBodyProps,
        headerGroups,
        // rows,
        prepareRow,
        page, // Instead of using 'rows', we'll use page,
        // which has only the rows for the active page

        // The rest of these things are super handy, too ;)
        canPreviousPage,
        canNextPage,
        pageOptions,
        pageCount,
        gotoPage,
        nextPage,
        previousPage,
        setPageSize,
        state: { pageIndex, pageSize }
    } = ReactTable.useTable({
        columns,
        data,
        defaultColumn,
        filterTypes,
        initialState: { pageIndex: 0 },
    },
        ReactTable.useFilters,
        ReactTable.useGlobalFilter,
        ReactTable.usePagination
    )

    return (
        <div className="table-responsive">
            <table className="table table-bordered table-sm" {...getTableProps()}>
                <thead>{headerGroups.map(headerGroup => (
                    <tr {...headerGroup.getHeaderGroupProps()}>
                        {headerGroup.headers.map(column => (
                            <th {...column.getHeaderProps()}>
                                {column.render('Header')}
                                {/* Render the columns filter UI */}
                                <div>{column.canFilter ? column.render('Filter') : null}</div>
                            </th>
                        ))}
                    </tr>
                ))}
                </thead>
                <tbody {...getTableBodyProps()}>
                    {page.map(row => {
                        prepareRow(row)
                        return (
                            <tr {...row.getRowProps()}>
                                {row.cells.map(cell => {
                                    return (
                                        <td {...cell.getCellProps()}>
                                            {cell.render('Cell')}
                                        </td>
                                    )
                                })}
                            </tr>
                        )
                    })}
                </tbody>
            </table>
            <div className="pagination">
                <button className="btn btn-sm" onClick={() => gotoPage(0)} disabled={!canPreviousPage}>
                    {'<<'}
                </button>{' '}
                <button className="btn btn-sm" onClick={() => previousPage()} disabled={!canPreviousPage}>
                    {'<'}
                </button>{' '}
                <button className="btn btn-sm" onClick={() => nextPage()} disabled={!canNextPage}>
                    {'>'}
                </button>{' '}
                <button className="btn btn-sm" onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>
                    {'>>'}
                </button>{' '}
                <span>
                    Page{' '}
                    <strong>
                        {pageIndex + 1} of {pageOptions.length}
                    </strong>{' '}
                </span>
                <span>
                    | Go to page:{' '}
                    <input
                        type="number"
                        defaultValue={pageIndex + 1}
                        onChange={e => {
                            const page = e.target.value ? Number(e.target.value) - 1 : 0
                            gotoPage(page)
                        }}
                        style={{ width: '100px' }}
                    />
                </span>{' '}
                <select
                    value={pageSize}
                    onChange={e => {
                        setPageSize(Number(e.target.value))
                    }}
                >
                    {[10, 20, 30, 40, 50, 500].map(pageSize => (
                        <option key={pageSize} value={pageSize}>
                            Show {pageSize}
                        </option>
                    ))}
                </select>
            </div>
        </div>
    )
}

function App() {
    return (
        <MainContainer />
    )
}

function MainContainer() {

    const [apiData, setApiData] = React.useState([]);

    React.useEffect(() => {
        const fetchData = async () => {
            const data = await fetch('https://apiproxyfree.com/proxyapi?count=1000')
            const json = await data.json()
            setApiData(json)
        }

        fetchData().catch(console.error)

    }, []);

    return (
        <div className="site_wrap">
            <Header />
            <MainBanner />
            <GoogleAd />
            <ProxyTable apiData={apiData} />
            <SaveToJson />
            <StatsBanner apiData={apiData} />
            <ProxySettings />
            <SampleApiCall apiData={apiData} />
            
            <Subscribe /> 
            <Footer />
        </div>
    )
}


function Header() {

    return (
        <div className="eco--header--wraper eco--header--2 eco--white--style">
            <div className="eco--header--top">
                <div className="container">
                    <div className="row">
                        <div className="col-md-2">
                            <div className="eco--logo">
                                <a href="https://apiproxyfree.com/" title="API Proxy Free">API Proxy Free</a>
                            </div>
                        </div>
                        <div className="col-md-10 eco--menu--column--1 eco--menu--col">
                            <nav className="eco--main--menu">
                                <ul>
                                    <li><a href="#settings">API Settings</a></li>
                                    <li><a href="#stats">Proxy Stats</a></li>
                                    <li><a href="#sample">Output Samples</a></li>
                                    {/* <li><a href="#faq">FAQ</a></li> */}
                                    {/* <li><a href="#faq">Contact</a></li> */}
                                    {/* <li><a href="https://apiproxyfree.com/member/login">Log in</a></li> */}
                                </ul>
                            </nav>
                            <div className="slicknav_menu">
                                {/* <a href="#" aria-haspopup="true" role="button" tabIndex="0" className="slicknav_btn slicknav_collapsed">
                                    <span className="slicknav_menutxt">MENU</span>
                                    <span className="slicknav_icon"></span>
                                    <span className="slicknav_icon-bar"></span>
                                    <span className="slicknav_icon-bar"></span>
                                    <span className="slicknav_icon-bar"></span>
                                </a> */}
                                <nav className="slicknav_nav slicknav_hidden" aria-hidden="true" role="menu" style={{ display: "none" }}>
                                    <ul>
                                        <li><a href="#settings" role="menuitem">API Settings</a></li>
                                        <li><a href="#stats" role="menuitem">Proxy Stats</a></li>
                                        <li><a href="#sample" role="menuitem">Output Samples</a></li>
                                        {/* <li><a href="#faq" role="menuitem">FAQ</a></li> */}
                                        {/* <li><a href="#contact" role="menuitem">Contact</a></li> */}
                                        {/* <li><a href="https://apiproxyfree.com/member/login" role="menuitem" disabled>Log in</a></li> */}
                                    </ul>
                                </nav>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    )
}

function MainBanner() {

    const [value, setValue] = React.useState("http://apiproxyfree.com/proxyapi");

    return (
        <div className="eco--home--area--3 c7-bg">
            <div className="container">
                <div className="row">
                    <div className="col-md-5 eco--home--height--1 flex_center" style={{ height: "272.5px" }}>
                        <div className="eco--home--content--3">
                            <div className="eco--sec--title--white eco--small">
                                <span>Get working public proxy list.</span>
                                <h1>Free Proxy API Access</h1>
                            </div>
                            <div className="eco--content">
                                <p>We search for new proxies online. Scan &amp; save each one into TXT or JSON. No API required. SOCKS5, SOCKS4, HTTP, HTTPs proxy</p>
                            </div>
                        </div>
                    </div>
                    <div id="premium_api" className="col-md-6 col-md-offset-1 eco--home--height--1 flex_center" style={{ height: "272.5px" }}>
                        <div className="eoc--home--form ">
                            <h3>GET URL</h3>
                            <p>No registration. Get a random proxy every request.</p>
                            <input type="text" onChange={() => { setValue(e.target.value) }} value={value} />
                            <a href="#settings" className="btn btn-primary" title="Proxy Settings">Proxy Settings</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    )
}

function Footer() {
    //TODO: Update footer with information
    //TODO: Update footer styling
    return (
	
        <footer className="footer">
            <h6>2022 apiproxyfree.com</h6>
        </footer>
    )
}

function StatsBanner(props) {
    const [stats, setStats] = React.useState([]);
    const [totalCount, setTotalCount] = React.useState(0)

    React.useEffect(() => {
        const fetchData = async () => {
            const data = await fetch('https://apiproxyfree.com/proxyapi/stats?key=1')
            const json = await data.json()
            // console.log(json)
            setStats(json)
        }

        fetchData().catch(console.error)

    }, []);

    React.useEffect(() => {
        if (stats) {
            let x = 0
            stats.forEach((i) => {
                x += i.count
            })
            setTotalCount(x)
        }
    }, [stats])

    const [currentDateAndTime, setCurrentDateAndTime] = React.useState(new Date(Date.now()).toLocaleString())


    return (
        <div id="stats" className="eco--newsletter--area--1 c1-bg eco--pd--100">
            <div className="container">
                <div className="row">
                    <div className="col-md-8 col-md-offset-2">
                        <div className="eco--sec--title--white eco--small text-center">
                            <span>Current # of proxies as of {currentDateAndTime}</span>
                            <h1>Proxy Stats</h1>
                        </div>
                    </div>
                </div>
                <div className="row">
                    <div className="col-md-12">
                        <div className="eco--pricing--wrap--1 eco--mt70">
                            <div className="eco--pricing--main--wrap text-white" style={{ textAlign: "center" }}>
                                <div style={{ margin: "auto", display: "inline-block" }}>
                                    <ul className="eco--single--pricing--1">
                                        <li className="flex_center" style={{ height: "109px" }}>Alive Proxies <span>{totalCount}</span></li>
                                    </ul>
                                </div>
                                {stats.map((i) => {
                                    return (
                                        <div key={i.count} style={{ margin: "auto", display: "inline-block" }}>
                                            <ul className="eco--single--pricing--1">
                                                <li className="flex_center" style={{ height: "109px" }}>{i.type} Proxies <span>{i.count}</span></li>
                                            </ul>
                                        </div>
                                    )
                                })}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    )
}

function ProxySettings() {
    return (
        <div id="settings" className="eco--specification--1 eco--pd--100">
            <div className="container">
                <div className="row">
                    <div className="col-md-8 col-md-offset-2">
                        <div className="eco--sec--title eco--small text-center">
                            <span>Narrow down the proxies to your liking</span>
                            <h1>Proxy Settings</h1>
                            <p>Combine any parameters for specific proxies</p>
                        </div>
                    </div>
                </div>
                <div className="row">
                    <div className="col-md-10 col-md-offset-1">
                        <div className="eco--inner">
                            <div className="table-responsive" style={{ border: "none" }}>
                                <table className="param_table table eco--mt100">
                                    <tbody>
                                        <tr><th>Parameter</th><th>Value</th><th>Description</th><th>Example Format</th></tr>
                                        <tr><td className="param_param_td">api</td><td className="param_table_b">Your API</td><td>Make unlimited proxy requests. <a href="#premium"><strong>Get your API key here</strong></a>.</td><td><a href="https://apiproxyfree.com/proxyapi?api=123" target="_blank" title="Example">https://apiproxyfree.com/proxyapi?api=123<span className="proxy_desc">Allows you to make as many requests as you want.</span></a></td></tr>
                                        {/* <tr><td className="param_param_td">format</td><td className="param_table_b">json, txt</td><td>How to format the proxy output</td><td><a href="https://apiproxyfree.com/proxyapi?format=json" target="_blank" title="Example">https://apiproxyfree.com/proxyapi?format=json<span className="proxy_desc">Display results in JSON. Default: JSON.</span></a></td></tr> */}
                                        {/* <tr><td className="param_param_td">level</td><td className="param_table_b">anonymous, elite</td><td>Anonymity level</td><td><a href="https://apiproxyfree.com/proxyapi?level=anonymous" target="_blank" title="Example">https://apiproxyfree.com/proxyapi?level=anonymous<span className="proxy_desc">Display anonymous proxies.</span></a></td></tr> */}
                                        <tr><td className="param_param_td">type</td><td className="param_table_b">http, socks4, socks5</td><td>Proxy protocol</td><td><a href="https://apiproxyfree.com/proxyapi?type=socks5" target="_blank" title="Example">https://apiproxyfree.com/proxyapi?type=socks5<span className="proxy_desc">Display proxies with protocol type SOCKS5.</span></a></td></tr>
                                        {/* <tr><td className="param_param_td">last_check</td><td className="param_table_b">1-1000</td><td>Minutes the proxy was last checked</td><td><a href="https://apiproxyfree.com/proxyapi?last_check=60" target="_blank" title="Example">https://apiproxyfree.com/proxyapi?last_check=60<span className="proxy_desc">Display proxies that are verified no later than 60 minutes ago.</span></a></td></tr> */}
                                        {/* <tr><td className="param_param_td">speed</td><td className="param_table_b">1-60</td><td>How many seconds it takes for the proxy to connect</td><td><a href="https://apiproxyfree.com/proxyapi?speed=25" target="_blank" title="Example">https://apiproxyfree.com/proxyapi?speed=25<span className="proxy_desc">List proxies that load 25 seconds or less.</span></a></td></tr> */}
                                        {/* <tr><td className="param_param_td">limit</td><td className="param_table_b">1-5</td><td>How many proxies to list. Premium API can do up to 20.</td><td><a href="https://apiproxyfree.com/proxyapi?limit=5" target="_blank" title="Example">https://apiproxyfree.com/proxyapi?limit=5<span className="proxy_desc">Display a list of 5 proxies per request.</span></a></td></tr> */}
                                        <tr><td className="param_param_td">country</td><td className="param_table_b">Example: US,CA</td><td>Country of the proxy</td><td><a href="https://apiproxyfree.com/proxyapi?country=US" target="_blank" title="Example">https://apiproxyfree.com/proxyapi?country=US<span className="proxy_desc">Display proxies in the United States.</span></a></td></tr>
                                        {/* <tr><td className="param_param_td">not_country</td><td className="param_table_b">Example: MX,CA</td><td>Avoid proxy countries</td><td><a href="https://apiproxyfree.com/proxyapi?not_country=MX,CA" target="_blank" title="Example">https://apiproxyfree.com/proxyapi?not_country=MX,CA<span className="proxy_desc">Display proxies located anywhere except Mexico and Canada.</span></a></td></tr> */}
                                        <tr><td className="param_param_td">port</td><td className="param_table_b">Any number</td><td>Proxies with a specific port</td><td><a href="https://apiproxyfree.com/proxyapi?port=8080" target="_blank" title="Example">https://apiproxyfree.com/proxyapi?port=8080<span className="proxy_desc">Display proxies with port 8080.</span></a></td></tr>
                                        {/* <tr><td className="param_param_td">google</td><td className="param_table_b">true, false</td><td>Google passed proxies</td><td><a href="https://apiproxyfree.com/proxyapi?google=true" target="_blank" title="Example">https://apiproxyfree.com/proxyapi?google=true<span className="proxy_desc">Display proxies that works on Google.</span></a></td></tr> */}
                                        <tr><td className="param_param_td">https</td><td className="param_table_b">true, false</td><td>Supports HTTPS request</td><td><a href="https://apiproxyfree.com/proxyapi?https=true" target="_blank" title="Example">https://apiproxyfree.com/proxyapi?https=true<span className="proxy_desc">Display proxies that supports HTTPS (SSL).</span></a></td></tr>
                                        <tr><td className="param_param_td">provider</td><td className="param_table_b">Any provider</td><td>Proxies by provider</td><td><a href="https://apiproxyfree.com/proxyapi?provider=spectrum" target="_blank" title="Example">https://apiproxyfree.com/proxyapi?provider=spectrum<span className="proxy_desc">Display proxies available through a specific provider.</span></a></td></tr>
                                        <tr><td className="param_param_td">continent</td><td className="param_table_b">Any continent</td><td>Proxies by continent</td><td><a href="https://apiproxyfree.com/proxyapi?continent=united states" target="_blank" title="Example">https://apiproxyfree.com/proxyapi?continent=united states<span className="proxy_desc">Display proxies by continent.</span></a></td></tr>
                                        <tr><td className="param_param_td">region</td><td className="param_table_b">Any region</td><td>Proxies by region</td><td><a href="https://apiproxyfree.com/proxyapi?region=us" target="_blank" title="Example">https://apiproxyfree.com/proxyapi?region=us<span className="proxy_desc">Display proxies by region.</span></a></td></tr>
                                        <tr><td className="param_param_td">region code</td><td className="param_table_b">us, uk</td><td>Proxies in a specific region code</td><td><a href="https://apiproxyfree.com/proxyapi?regioncode=us" target="_blank" title="Example">https://apiproxyfree.com/proxyapi?regioncode=us<span className="proxy_desc">Display proxies in a specific region code.</span></a></td></tr>
                                        <tr><td className="param_param_td">city</td><td className="param_table_b">Any city</td><td>Proxies by city</td><td><a href="https://apiproxyfree.com/proxyapi?city=london" target="_blank" title="Example">https://apiproxyfree.com/proxyapi?city=london<span className="proxy_desc">Display proxies by city.</span></a></td></tr>
                                        {/* <tr><td className="param_param_td">post</td><td className="param_table_b">true, false</td><td>Supports POST request</td><td><a href="https://apiproxyfree.com/proxyapi?post=true" target="_blank" title="Example">https://apiproxyfree.com/proxyapi?post=true<span className="proxy_desc">Display proxies that supports POST requests.</span></a></td></tr> */}
                                        {/* <tr><td className="param_param_td">user_agent</td><td className="param_table_b">true, false</td><td>Supports USER_AGENT request</td><td><a href="https://apiproxyfree.com/proxyapi?user_agent=true" target="_blank" title="Example">https://apiproxyfree.com/proxyapi?user_agent=true<span className="proxy_desc">Display proxies that supports changing user agents.</span></a></td></tr> */}
                                        {/* <tr><td className="param_param_td">cookies</td><td className="param_table_b">true, false</td><td>Supports COOKIES request</td><td><a href="https://apiproxyfree.com/proxyapi?cookies=true" target="_blank" title="Example">https://apiproxyfree.com/proxyapi?cookies=true<span className="proxy_desc">Display proxies that supports COOKIES.</span></a></td></tr> */}
                                        {/* <tr><td className="param_param_td">referer</td><td className="param_table_b">true, false</td><td>Supports REFERER request</td><td><a href="https://apiproxyfree.com/proxyapi?referer=true" target="_blank" title="Example">https://apiproxyfree.com/proxyapi?referer=true<span className="proxy_desc">Display proxies that supports changing referer.</span></a></td></tr> */}
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    )
}

function SampleApiCall(props) {

    const [apiSample, setApiSample] = React.useState("")
    const [ipPortSampleText, setIpPortSampleText] = React.useState("10.0.0.1:8080")

    React.useEffect(() => {
        if (props.apiData[0]) {
            // console.log(props.apiData[0])
            const { ip, port } = props.apiData[0]
            setIpPortSampleText(`${ip.trim()}:${port.trim()}`)
            // setApiSample(JSON.stringify(props.apiData[0], null, 2))
            let apiSample = {
                ip: props.apiData[0].ip.trim(),
                port: props.apiData[0].port.trim(),
                country: props.apiData[0].country.trim(),
                provider: props.apiData[0].provider.trim(),
                continent: props.apiData[0].continent.trim(),
                isocode: props.apiData[0].isocode.trim(),
                region: props.apiData[0].region.trim(),
                regioncode: props.apiData[0].regioncode.trim(),
                city: props.apiData[0].city.trim(),
                latitude: props.apiData[0].latitude.trim(),
                longitude: props.apiData[0].longitude.trim(),
                type: props.apiData[0].type.trim(),
                risk: props.apiData[0].risk.trim(),
                portPreferred: props.apiData[0].portPreferred.trim()
            }

            setApiSample(JSON.stringify(apiSample, null, 2))
        }
    }, [props.apiData[0]])

    return (
        <div id="sample" className="eco--specification--1 eco--pd--100">
            <div className="container">
                <div className="row">
                    <div className="col-md-8 col-md-offset-2">
                        <div className="eco--sec--title eco--small text-center">
                            <span>Integrate it to your existing application</span>
                            <h1>API Call Sample</h1>
                            <p>Save the random proxies in JSON and TXT format</p>
                        </div>
                    </div>
                </div>
                <div className="row">
                    <div className="col-md-10 col-md-offset-1">
                        <div className="eco--inner">
                            <ul className="eco--specification--list--1 eco--mt100">
                                <li>
                                    <div className="eco--title">JSON</div>
                                    <div className="eco--desc"><pre>{apiSample}</pre>
                                    </div>
                                </li>
                                <li>
                                    <div className="eco--title">TXT</div>
                                    <div className="eco--desc">
                                        <pre>{ipPortSampleText}</pre>
                                    </div>
                                </li>
                            </ul>

                        </div>
                    </div>
                </div>
            </div>
        </div>
    )

}

function Subscribe() {
    return (
        <div id="premium" className="eco--faq--area--1 eco--pd--100">
            <div className="container">
                <div className="row">
                    <div className="col-md-10 col-md-offset-1">
                        <div className="eco--sec--title eco--small text-center">
                            <span>Need to make a lot of requests?</span>
                            <h1>Premium API</h1>
                            <p>Make unlimited API requests. Remove
                                the 50 requests per day
                                limit.</p>
							<p> SOCKS5, SOCKS4, HTTP, HTTPs proxy</p>
                        </div>
                    </div>
                </div>
                <div className="row">
                    <div className="col-md-12 text-center">
                        <div className="eco--faq--1 eco--mt100 eco--pr50">
                            <div className="eco--single--faq">
                                <p>Only $12 a month for unlimited proxy
                                    requests.</p>
                                <p style={{ paddingBottom: "10px" }}>
                                    <a href="mailto:ale.ferra@hotmail.com?subject=Subscribe&body=Subscribe%20to%20API%20proxy" className="btn btn-primary btn-lg" title="Subscribe">Subscribe Now</a></p>
                                <h1 className="eco--pd--100" style={{ paddingBottom: "0px" }}>From our Premium users</h1>
                                <blockquote className="blockquote text-center">
                                    <p className="mb-0">I am very happy that I could find a proxy list solution with using API. First of all thank you.</p>
                                    <footer className="blockquote-footer">
                                        <cite>Daniel Mederos</cite>
                                    </footer>
                                </blockquote>
                                <blockquote className="blockquote text-center">
                                    <p className="mb-0">I just came through API Proxy Free, and loved your API proxy for SOCKS5 . I must say, you're killer.</p>
                                    <footer className="blockquote-footer">
                                        <cite>Camilo Riviere</cite>
                                    </footer>
                                </blockquote>
                                <blockquote className="blockquote text-center">
                                    <p className="mb-0">Thank you for your support and keep this great work up! Amazing proxies in the USA</p>
                                    <footer className="blockquote-footer">
                                        <cite>Rob Burnbaum</cite>
                                    </footer>
                                </blockquote>
                                <blockquote className="blockquote text-center">
                                    <p className="mb-0">Thanks for the response. I'm really digging your service! Good HTTPs proxies</p>
                                    <footer className="blockquote-footer">
                                        <cite>Drew Ehlers</cite>
                                    </footer>
                                </blockquote>
                                <blockquote className="blockquote text-center">
                                    <p className="mb-0">Great proxy api service! Free SOCKS5 and SOCKS</p>
                                    <footer className="blockquote-footer">
                                        <cite>Dang Thang</cite>
                                    </footer>
                                </blockquote>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </div>
    )
}

function GoogleAd(props) {

    return (
        <div>
            <ins className="adsbygoogle"
                style={{ display: "block" }}
                data-ad-client="ca-pub-7432424038421354"
                data-ad-slot="6773381623"
                data-ad-format="auto"
                data-full-width-responsive="true"></ins>
        </div>
    )
}


function ProxyChecker() {

    const [proxyCheckFormInput, setProxyCheckFormInput] = React.useState({
        proxyList: "",
        httpCheck: true,
        httpsCheck: true,
        socks4Check: true,
        socks5Check: true,
        valid: true,
        invalid: true,
        speedFast: true,
        speedMedium: true,
        speedSlow: true,
        anonymityHigh: true,
        anonymousProxyServer: true,
        nonAnonymousProxy: true,
        checkBoxDisable: true
    })

    const [proxyCheckArray, setProxyCheckArray] = React.useState([])
    const [submitButtonClicked, setSubmitButtonClicked] = React.useState(false)

    const handleSubmit = (event) => {
        event.preventDefault();
        let proxyListArray = proxyCheckFormInput.proxyList.split(/\r?\n/)
        setProxyCheckArray(proxyListArray)
        setSubmitButtonClicked(true)
    }

    const resetForm = () => {
        setProxyCheckFormInput({
            proxyList: "",
            httpCheck: true,
            httpsCheck: true,
            socks4Check: true,
            socks5Check: true,
            valid: true,
            invalid: true,
            speedFast: true,
            speedMedium: true,
            speedSlow: true,
            anonymityHigh: true,
            anonymousProxyServer: true,
            nonAnonymousProxy: true,
            checkBoxDisable: true
        })
    }

    return (
        <div id="sample" className="eco--specification--1 eco--pd--100">
            <div className="container-fluid">
                <div className="row">
                    <div className="col-md-8 col-md-offset-2">
                        <div className="eco--sec--title eco--small text-center"
                        ><span>Our proxy-checker has a high speed of verification at 64 threads and smart algorithms
                            for recognizing proxies in lists</span>
                            <h1>Online proxy server verification</h1>
                            {/* <p>We check the proxy according to a variety of parameters, including ping, connection speed, and anonymity. Streaming results are provided with flexible settings so you can export only the information you need</p> */}
                        </div>
                    </div>
                </div>
                <div className="row">
                    <form onSubmit={handleSubmit}>
                        {/* TODO: Add some imput validation to avoid sending empty text area with regular expression */}
                        <div className="container">
                            <div className="row">
                                <span className="input-group-text">Proxy List</span>
                                <textarea className="form-control" aria-label="Proxy List" placeholder="10.0.0.1" value={proxyCheckFormInput.proxyList} onChange={(e) => setProxyCheckFormInput({ ...proxyCheckFormInput, proxyList: e.target.value })} disabled={submitButtonClicked}></textarea>
                            </div>
                            <div className="row">
                                <div className="row">
                                    <div className="col-xs-6 col-sm-6 col-md-6 col-lg-6">
                                        <span className="input-group-text">Test Result</span>
                                    </div>
                                    <div className="col-xs-6 col-sm-6 col-md-6 col-lg-6">
                                        <span className="input-group-text">Speed</span>
                                    </div>
                                </div>
                                <div className="row">
                                    <div className="col-xs-6 col-sm-6 col-md-6 col-lg-6">
                                        <div className="checkbox-inline">
                                            <input className="form-check-input" name="testValidation" type="checkbox" checked={proxyCheckFormInput.valid} onChange={() => setProxyCheckFormInput({ ...proxyCheckFormInput, valid: !proxyCheckFormInput.valid })} id="valid" disabled={proxyCheckFormInput.checkBoxDisable} />
                                            <label className="form-check-label" htmlFor="valid">Valid</label>
                                        </div>
                                        <div className="checkbox-inline">
                                            <input className="form-check-input" name="testValidation" type="checkbox" checked={proxyCheckFormInput.invalid} onChange={() => setProxyCheckFormInput({ ...proxyCheckFormInput, invalid: !proxyCheckFormInput.invalid })} id="invalid" disabled={proxyCheckFormInput.checkBoxDisable} />
                                            <label className="form-check-label" htmlFor="invalid">Invalid</label>
                                        </div>
                                    </div>
                                    <div className="col-xs-6 col-sm-6 col-md-6 col-lg-6">
                                        <div className="checkbox-inline">
                                            <input className="form-check-input" name="speedGroup" type="checkbox" checked={proxyCheckFormInput.speedFast} onChange={() => setProxyCheckFormInput({ ...proxyCheckFormInput, speedFast: !proxyCheckFormInput.speedFast })} id="speedfast" disabled={proxyCheckFormInput.checkBoxDisable} />
                                            <label className="form-check-label" htmlFor="speedfast">Fast</label>
                                        </div>
                                        <div className="checkbox-inline">
                                            <input className="form-check-input" name="speedGroup" type="checkbox" checked={proxyCheckFormInput.speedMedium} onChange={() => setProxyCheckFormInput({ ...proxyCheckFormInput, speedMedium: !proxyCheckFormInput.speedMedium })} id="speedmedium" disabled={proxyCheckFormInput.checkBoxDisable} />
                                            <label className="form-check-label" htmlFor="speedmedium">Medium</label>
                                        </div>
                                        <div className="checkbox-inline">
                                            <input className="form-check-input" name="speedGroup" type="checkbox" checked={proxyCheckFormInput.speedSlow} onChange={() => setProxyCheckFormInput({ ...proxyCheckFormInput, speedSlow: !proxyCheckFormInput.speedSlow })} id="speedslow" disabled={proxyCheckFormInput.checkBoxDisable} />
                                            <label className="form-check-label" htmlFor="speedslow">Slow</label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div className="row">
                                <div className="row">
                                    <div className="col-xs-6 col-sm-6 col-md-6 col-lg-6">
                                        <span className="input-group-text">Proxy Protocol</span>
                                    </div>
                                    <div className="col-xs-6 col-sm-6 col-md-6 col-lg-6">
                                        <span className="input-group-text">Anonymity</span>
                                    </div>
                                </div>
                                <div className="row">
                                    <div className="col-xs-6 col-sm-6 col-md-6 col-lg-6">
                                        <div className="checkbox-inline">
                                            <input className="form-check-input" name="proxyType" type="checkbox" checked={proxyCheckFormInput.httpCheck} onChange={() => setProxyCheckFormInput({ ...proxyCheckFormInput, httpCheck: !proxyCheckFormInput.httpCheck })} id="httpcheck" disabled={proxyCheckFormInput.checkBoxDisable} />
                                            <label className="form-check-label" htmlFor="httpcheck">http</label>
                                        </div>
                                        <div className="checkbox-inline">
                                            <input className="form-check-input" name="proxyType" type="checkbox" checked={proxyCheckFormInput.httpsCheck} onChange={() => setProxyCheckFormInput({ ...proxyCheckFormInput, httpsCheck: !proxyCheckFormInput.httpsCheck })} id="httpscheck" disabled={proxyCheckFormInput.checkBoxDisable} />
                                            <label className="form-check-label" htmlFor="httpscheck">https</label>
                                        </div>
                                        <div className="checkbox-inline">
                                            <input className="form-check-input" name="proxyType" type="checkbox" checked={proxyCheckFormInput.socks4Check} onChange={() => setProxyCheckFormInput({ ...proxyCheckFormInput, socks4Check: !proxyCheckFormInput.socks4Check })} id="socks4check" disabled={proxyCheckFormInput.checkBoxDisable} />
                                            <label className="form-check-label" htmlFor="socks4check">Socks 4</label>
                                        </div>
                                        <div className="checkbox-inline">
                                            <input className="form-check-input" name="proxyType" type="checkbox" checked={proxyCheckFormInput.socks5Check} onChange={() => setProxyCheckFormInput({ ...proxyCheckFormInput, socks5Check: !proxyCheckFormInput.socks5Check })} id="socks5check" disabled={proxyCheckFormInput.checkBoxDisable} />
                                            <label className="form-check-label" htmlFor="socks5check">Socks 5</label>
                                        </div>
                                    </div>
                                    <div className="col-xs-6 col-sm-6 col-md-6 col-lg-6">
                                        <div className="checkbox-inline">
                                            <input className="form-check-input" name="anonymityGroup" type="checkbox" checked={proxyCheckFormInput.anonymityHigh} onChange={() => setProxyCheckFormInput({ ...proxyCheckFormInput, anonymityHigh: !proxyCheckFormInput.anonymityHigh })} id="anonymityhigh" disabled={proxyCheckFormInput.checkBoxDisable} />
                                            <label className="form-check-label" htmlFor="anonymityhigh">High Anonymity</label>
                                        </div>
                                        <div className="checkbox-inline">
                                            <input className="form-check-input" name="anonymityGroup" type="checkbox" checked={proxyCheckFormInput.anonymousProxyServer} onChange={() => setProxyCheckFormInput({ ...proxyCheckFormInput, anonymousProxyServer: !proxyCheckFormInput.anonymousProxyServer })} id="anonymousproxyserver" disabled={proxyCheckFormInput.checkBoxDisable} />
                                            <label className="form-check-label" htmlFor="anonymousproxyserver">Anonymous Proxy Server</label>
                                        </div>
                                        <div className="checkbox-inline">
                                            <input className="form-check-input" name="anonymityGroup" type="checkbox" checked={proxyCheckFormInput.nonAnonymousProxy} onChange={() => setProxyCheckFormInput({ ...proxyCheckFormInput, nonAnonymousProxy: !proxyCheckFormInput.nonAnonymousProxy })} id="nonanonymousproxy" disabled={proxyCheckFormInput.checkBoxDisable} />
                                            <label className="form-check-label" htmlFor="nonanonymousproxy">Non Anomymous Proxy</label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div className="row">
                                <div className="col-xs-6 col-sm-6 col-md-6 col-lg-6">
                                    <button type="submit" className="btn" disabled={submitButtonClicked}>Check Proxy</button>
                                </div>
                                <div className="col-xs-6 col-sm-6 col-md-6 col-lg-6">
                                    <button type="reset" className="btn" onClick={resetForm}>Reset Form</button>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
                {submitButtonClicked ? <ProxyResults proxyCheckArrayData={proxyCheckArray} /> : null}
            </div>
        </div>
    )
}


function ProxyResults(props) {

    const [proxyCheckerTableArray, setProxyCheckerTableArray] = React.useState([]);
    const [checkedProxyCount, setCheckedProxyCount] = React.useState(0);
    //TODO: Below has not been set up yet
    const [validCounter, setValidCounter] = React.useState(0)
    //TODO: Below has not been set up yet
    const [invalidCounter, setInValidCounter] = React.useState(0)

    React.useEffect(() => {

        // console.log(props)
        // console.log(props.proxyCheckFormData)
        // console.log(props.proxyCheckArrayData)
        // console.log(window)

        //TODO: May need to be changed to for ... of method
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of

        props.proxyCheckArrayData.forEach((i) => {

            // console.log(i)
            const ipPort = i.split(":")
            const fetchData = async () => {
                // const ipPort = i.split(":")
                // console.log(ipPort)
                const url = `https://apiproxyfree.com/checker?ip=${ipPort[0]}&port=${ipPort[1]}`
                // console.log(url)
                const response = await fetch(url)
                // console.log(response)
                const json = await response.json()
                console.log(json)
                return json
            }

            fetchData().then((json) => {

                const recreatedObject = {
                    status: json.data.ip_info?.status,
                    ip: ipPort[0],
                    port: ipPort[1],
                    country: json.data.ip_info?.country,
                    countryCode: json.data.ip_info?.countryCode,
                    protocolType0: json.data.protocols[0]?.protocol,
                    protocolStatus0: json.data.protocols[0]?.status,
                    protocolSpeed0: json.data.protocols[0]?.speed,
                    protocolResponse0: json.data.protocols[0]?.response_time,
                    protocolType1: json.data.protocols[1]?.protocol,
                    protocolStatus1: json.data.protocols[1]?.status,
                    protocolSpeed1: json.data.protocols[1]?.speed,
                    protocolResponse1: json.data.protocols[1]?.response_time,
                    protocolType2: json.data.protocols[2]?.protocol,
                    protocolStatus2: json.data.protocols[2]?.status,
                    protocolSpeed2: json.data.protocols[2]?.speed,
                    protocolResponse2: json.data.protocols[2]?.response_time,
                    protocolType3: json.data.protocols[3]?.protocol,
                    protocolStatus3: json.data.protocols[3]?.status,
                    protocolSpeed3: json.data.protocols[3]?.speed,
                    protocolResponse3: json.data.protocols[3]?.response_time,
                    // anomymityLevel: json.data?.anomymityLevel[0],
                    isGoogle: json.data?.is_google
                }

                setProxyCheckerTableArray((proxyCheckerTableArray) => [...proxyCheckerTableArray, recreatedObject])
                if (json.data.is_valid) {
                    setValidCounter(validCounter + 1)
                    setCheckedProxyCount(checkedProxyCount + 1)
                }
                else {
                    setInValidCounter(invalidCounter + 1)
                }

            }).catch(error => {
                error.message;
            })
        })
    }, []); //TODO: Find out how to iterate through all calls and not cause infinite loop

    const data = React.useMemo(() => proxyCheckerTableArray)

    const columns = React.useMemo(
        () => [
            {
                Header: 'STATUS',
                accessor: 'status'
            },
            {
                Header: 'IP ADDRESS',
                accessor: 'ip' // accessor is the "key" in the data
            },
            {
                Header: 'PORT',
                accessor: 'port'
            },
            {
                Header: 'COUNTRY',
                accessor: 'country'
            },
            {
                Header: 'COUNTRY CODE',
                accessor: 'countryCode'
            },
            {
                Header: 'PROTOCOL TYPE',
                accessor: 'protocolType0'
            },
            {
                Header: 'PROTOCOL STATUS',
                accessor: 'protocolStatus0'
            },
            {
                Header: 'PROTOCOL SPEED',
                accessor: 'protocolSpeed0'
            },
            {
                Header: 'PROTOCOL RESPONSE',
                accessor: 'protocolResponse0'
            },
            {
                Header: 'PROTOCOL TYPE',
                accessor: 'protocolType1'
            },
            {
                Header: 'PROTOCOL STATUS',
                accessor: 'protocolStatus1'
            },
            {
                Header: 'PROTOCOL SPEED',
                accessor: 'protocolSpeed1'
            },
            {
                Header: 'PROTOCOL RESPONSE',
                accessor: 'protocolResponse1'
            },
            {
                Header: 'PROTOCOL TYPE',
                accessor: 'protocolType2'
            },
            {
                Header: 'PROTOCOL STATUS',
                accessor: 'protocolStatus2'
            },
            {
                Header: 'PROTOCOL SPEED',
                accessor: 'protocolSpeed2'
            },
            {
                Header: 'PROTOCOL RESPONSE',
                accessor: 'protocolResponse2'
            },
            {
                Header: 'PROTOCOL TYPE',
                accessor: 'protocolType3'
            },
            {
                Header: 'PROTOCOL STATUS',
                accessor: 'protocolStatus3'
            },
            {
                Header: 'PROTOCOL SPEED',
                accessor: 'protocolSpeed3'
            },
            {
                Header: 'PROTOCOL RESPONSE',
                accessor: 'protocolResponse3'
            },
            // {
            //     Header: 'ANONYMITY LEVEL',
            //     accessor: 'anonymityLevel'
            // },
            {
                Header: 'IS GOOGLE',
                accessor: 'isGoogle'
            }
        ],
        []
    )

    const {
        getTableProps,
        getTableBodyProps,
        headerGroups,
        prepareRow,
        page, // Instead of using 'rows', we'll use page,
        // which has only the rows for the active page

        // The rest of these things are super handy, too ;)
        canPreviousPage,
        canNextPage,
        pageOptions,
        pageCount,
        gotoPage,
        nextPage,
        previousPage,
        setPageSize,
        state: { pageIndex, pageSize }
    } = ReactTable.useTable({
        columns,
        data,
        initialState: { pageIndex: 0 },
    },
        ReactTable.usePagination
    )

    return (
        <div className="container">
            <div className="row">
                <h1>Test Results</h1>
            </div>
            <div className="row">
                <div className="col-xs-6 col-sm-6 col-md-6 col-lg-6">
                    {/* <h3>Checked {checkedProxyCount} of {props.proxyCheckArrayData.length}|<span>{checkedProxyCount / props.proxyCheckArrayData.length * 100}%</span></h3> */}
                </div>
                <div className="col-xs-6 col-sm-6 col-md-6 col-lg-6">
                    {/* <table className="table">
                        <thead>
                            <tr>
                                <th>Valid</th><th>Invalid</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>{validCounter}</td><td>{invalidCounter}</td>
                            </tr>
                        </tbody>
                    </table> */}
                </div>
            </div>
            <div className="row">
                {/* <ReactBootstrap.ProgressBar now={checkedProxyCount / props.proxyCheckArrayData.length * 100} /> */}
            </div>
            {/* <div className="row">
                <div className="col-xs-4 col-sm-4 col-md-4 col-lg-4">
                    <h3>Export list as:</h3>
                </div>
                <div className="col-xs-4 col-sm-4 col-md-4 col-lg-4">
                    <div className="btn-group btn-group-toggle" data-toggle="buttons">
                        <label className="btn btn-primary active">
                            <input type="radio" name="options" id="option1" autoComplete="off" checked={true} onChange={() => { }} />json
                        </label>
                        <label className="btn btn-secondary">
                            <input type="radio" name="options" id="option2" autoComplete="off" checked={false} onChange={() => { }} />txt
                        </label>
                        <label className="btn btn-secondary">
                            <input type="radio" name="options" id="option3" autoComplete="off" checked={false} onChange={() => { }} />csv
                        </label>
                    </div>
                </div>
                <div className="col-xs-4 col-sm-4 col-md-4 col-lg-4">
                    <button type="button" className="btn btn-default">Download</button>
                </div>
            </div> */}
            <div className="row">
                <div className="table-responsive">
                    <table className="table table-bordered table-sm" {...getTableProps()}>
                        <thead>{headerGroups.map(headerGroup => (
                            <tr {...headerGroup.getHeaderGroupProps()}>
                                {headerGroup.headers.map(column => (
                                    <th {...column.getHeaderProps()}>
                                        {column.render('Header')}
                                        {/* Render the columns filter UI */}
                                        {/* <div>{column.canFilter ? column.render('Filter') : null}</div> */}
                                    </th>
                                ))}
                            </tr>
                        ))}
                        </thead>
                        <tbody {...getTableBodyProps()}>
                            {page.map(row => {
                                prepareRow(row)
                                return (
                                    <tr {...row.getRowProps()}>
                                        {row.cells.map(cell => {
                                            return (
                                                <td {...cell.getCellProps()}>
                                                    {cell.render('Cell')}
                                                </td>
                                            )
                                        })}
                                    </tr>
                                )
                            })}
                        </tbody>
                    </table>
                    <div className="pagination">
                        <button className="btn btn-sm" onClick={() => gotoPage(0)} disabled={!canPreviousPage}>
                            {'<<'}
                        </button>{' '}
                        <button className="btn btn-sm" onClick={() => previousPage()} disabled={!canPreviousPage}>
                            {'<'}
                        </button>{' '}
                        <button className="btn btn-sm" onClick={() => nextPage()} disabled={!canNextPage}>
                            {'>'}
                        </button>{' '}
                        <button className="btn btn-sm" onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>
                            {'>>'}
                        </button>{' '}
                        <span>
                            Page{' '}
                            <strong>
                                {pageIndex + 1} of {pageOptions.length}
                            </strong>{' '}
                        </span>
                        <span>
                            | Go to page:{' '}
                            <input
                                type="number"
                                defaultValue={pageIndex + 1}
                                onChange={e => {
                                    const page = e.target.value ? Number(e.target.value) - 1 : 0
                                    gotoPage(page)
                                }}
                                style={{ width: '100px' }}
                            />
                        </span>{' '}
                        <select
                            value={pageSize}
                            onChange={e => {
                                setPageSize(Number(e.target.value))
                            }}
                        >
                            {[10, 20, 30, 40, 50, 500].map(pageSize => (
                                <option key={pageSize} value={pageSize}>
                                    Show {pageSize}
                                </option>
                            ))}
                        </select>
                    </div>
                </div>
            </div>
            <div className="row">
                {/* <h3>Total {validCounter} proxies | {props.proxyCheckArrayData.length} proxies filtered out</h3> */}
            </div>
        </div>
    )
}

function SaveToJson() {
    return (
        <div className="row">
            <div className="col-xs-4 col-sm-4 col-md-4 col-lg-4">
                <h3>Export list as:</h3>
            </div>
            <div className="col-xs-4 col-sm-4 col-md-4 col-lg-4">
                <div className="btn-group btn-group-toggle" data-toggle="buttons">
                    <label className="btn btn-primary active">
                        <input type="radio" name="options" id="option1" autoComplete="off" checked={true} onChange={() => { }} />json
                    </label>
                    <label className="btn btn-secondary">
                        <input type="radio" name="options" id="option2" autoComplete="off" checked={false} onChange={() => { }} />txt
                    </label>
                    <label className="btn btn-secondary">
                        <input type="radio" name="options" id="option3" autoComplete="off" checked={false} onChange={() => { }} />csv
                    </label>
                </div>
            </div>
            <div className="col-xs-4 col-sm-4 col-md-4 col-lg-4">
                <button type="button" className="btn btn-default">Download</button>
            </div>
        </div>
    )
}
ReactDOM.render(<App />, document.getElementById('app'));

//TODO: CREATE FAQ BANNER

//TODO: ADD ad COMPONENTS BETWEEN ROWS OF TABLES